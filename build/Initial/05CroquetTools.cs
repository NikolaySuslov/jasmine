'From TeaSqueak3.2 of 19 September 2002 [latest update: #523] on 5 February 2004 at 4:22:40 pm'!"Change Set:		CroquetToolsDate:			5 February 2004Author:			Andreas RaabAdds CroquetTools - a place to stuff methods that you don't use from code but help managing some stuff. Right now includes some support for managing changes between systems (planned for the upcoming switch to 3.6)."!Object subclass: #CroquetTools	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Croquet-Tools'!!CroquetTools class methodsFor: 'changes' stamp: 'ar 2/5/2004 15:42'!fileOutAllChangesTo: baseDir	"Take all changes in the system and put them into the given directory"	"CroquetTools fileOutAllChangesTo: (FileDirectory default directoryNamed: 'unfiltered')"	| newClasses changedClasses commentClasses methodChanges changeTypes dir file selectors |	"Grab all the changes"	newClasses := IdentitySet new.	changedClasses := IdentitySet new.	commentClasses := IdentitySet new.	methodChanges := IdentityDictionary new.	Cursor wait showWhile:[	ChangeSet allInstancesDo:[:cs|		"Note: #changedClasses will only report classes which are still present so if a class got removed, it won't be listed."		cs changedClasses do:[:aClass|			"Check what changes we've done to the class"			changeTypes := cs classChangeAt: aClass name.			((changeTypes includes: #add) or:[changeTypes includes: #rename]) ifTrue:[				newClasses add: aClass theNonMetaClass.			] ifFalse:[				"only keep relevant information"				(changeTypes includes: #change) ifTrue:[changedClasses add: aClass].				(changeTypes includes: #comment) ifTrue:[commentClasses add: aClass].			].			"Check what methods we've changed"			changeTypes := cs methodChangesAtClass: aClass name.			changeTypes isEmpty ifFalse:[				(methodChanges at: aClass ifAbsentPut:[IdentitySet new]) addAll: changeTypes keys.			].		].	].	"Remove all of the newClasses from changedClasses, commentClasses, and methodChanges"	newClasses do:[:aClass| 		changedClasses remove: aClass ifAbsent:[].		changedClasses remove: aClass class ifAbsent:[].		commentClasses remove: aClass ifAbsent:[].		commentClasses remove: aClass class ifAbsent:[].		methodChanges removeKey: aClass ifAbsent:[].		methodChanges removeKey: aClass class ifAbsent:[].	].	].	Cursor write showWhile:[	"Now start writing out the changes"	baseDir assureExistence.	"First, the entirely new classes"	newClasses do:[:aClass|		dir := baseDir directoryNamed: aClass category.		dir assureExistence.		file := dir newFileNamed: aClass name,'.st'.		[aClass fileOutOn: file] ensure:[file close].	].	"Second, classes with shape changes"	(IdentitySet withAll: changedClasses asArray, commentClasses asArray, methodChanges keys asArray) do:[:aClass|		dir := baseDir directoryNamed: aClass theNonMetaClass category.		dir assureExistence.		file := dir newFileNamed: aClass name,'.st'.		[(changedClasses includes: aClass) 			ifTrue:[file nextChunkPut: aClass definition].		(commentClasses includes: aClass) 			ifTrue:[aClass organization putCommentOnFile: file numbered: 0 						moveSource: false forClass: aClass].		(methodChanges includesKey: aClass) ifTrue:[			selectors := methodChanges at: aClass.			aClass fileOutChangedMessages: selectors				on: file moveSource: false toFile: 0. 			(selectors reject:[:sel| aClass includesSelector: sel]) do:[:selector|				file cr; nextChunkPut: aClass name, ' removeSelector: #', selector,'.'.			].		].		] ensure:[file close].	].	].! !!CroquetTools class methodsFor: 'changes' stamp: 'ar 2/5/2004 15:26'!filterAllChangesFrom: dir1 to: dir2	"Take all changes from dir1 diff them against the current system and write the result into dir2"	"CroquetTools 		filterAllChangesFrom: (FileDirectory default directoryNamed: 'unfiltered')		to: (FileDirectory default directoryNamed: 'filtered')"	| fp srcDir dstDir file |	dir2 assureExistence.	dir1 directoryNames do:[:dirName|		srcDir := dir1 directoryNamed: dirName.		dstDir := dir2 directoryNamed: dirName.		(srcDir fileNamesMatching: '*.st') do:[:fName|			fp _ FilePackage fromFileNamed: (srcDir fullNameFor: fName).			fp classes copy do:[:theClass|				Cursor wait showWhile:[					theClass removeAllUnmodified.				].				theClass hasChanges ifFalse:[					fp removeClass: theClass.				].			].			fp classes isEmpty ifFalse:[				dstDir assureExistence.				fp removeDoIts.				file := dstDir newFileNamed: fName.				[fp fileOutOn: file] ensure:[file close].			].		].	].! !!CroquetTools class methodsFor: 'changes' stamp: 'ar 2/5/2004 16:18'!mergeAllChangesFrom: baseDir to: fileName	"Take all changes from baseDir write a single CS into fileName"	"CroquetTools 		mergeAllChangesFrom: (FileDirectory default directoryNamed: 'filtered')		to: 'merged.cs'"	| srcDir file merged |	merged _ FilePackage new.	baseDir directoryNames do:[:dirName|		srcDir := baseDir directoryNamed: dirName.		(srcDir fileNamesMatching: '*.st') do:[:fName|			file := srcDir readOnlyFileNamed: fName.			[merged fullName: file fullName.			merged fileInFrom: file] ensure:[file close].		].	].	merged removeDoIts.	merged fixClassOrder.	Cursor write showWhile:[		file := baseDir newFileNamed: fileName.		[merged fileOutOn: file] ensure:[file close].	].! !!FilePackage methodsFor: 'accessing' stamp: 'ar 2/5/2004 16:17'!fixClassOrder	"Essentially bubble sort the classOrder so that superclasses appear before subclasses"	| superClass index subClass superIndex |	index := 0.	[index < classOrder size] whileTrue:[		subClass := classOrder at: (index := index + 1).		superClass := nil.		subClass isMetaClass ifTrue:[			"Treat non-meta as superclass"			superClass := self classes at: subClass name ifAbsent:[nil].		] ifFalse:[			subClass hasDefinition ifTrue:[				superClass := self classes 					at: (Scanner new scanTokens: subClass definition) first ifAbsent:[nil].				superClass ifNotNil:[superClass hasDefinition ifFalse:[superClass := nil]].			].		].		superClass ifNotNil:[			superIndex := classOrder indexOf: superClass ifAbsent:[self error:'Where is the class?'].			superIndex > index ifTrue:[				"Move superClass before index"				classOrder remove: superClass.				classOrder add: superClass before: subClass.				"Rewind index - we need to check superClass itself"				index := index - 1.			].		].	].! !!FilePackage methodsFor: 'accessing' stamp: 'ar 2/5/2004 15:11'!removeDoIts	doIts := OrderedCollection new.! !!FilePackage methodsFor: 'initialize' stamp: 'ar 2/5/2004 15:14'!fromFileNamed: aName	| stream |	fullName := aName.	stream := FileStream readOnlyFileNamed: aName.	[self fileInFrom: stream] ensure:[stream close].! !!PseudoClass methodsFor: 'class' stamp: 'ar 2/5/2004 15:18'!commentString	^self comment asString! !!PseudoClass methodsFor: 'printing' stamp: 'ar 2/5/2004 16:04'!printOn: aStream	super printOn: aStream.	aStream nextPut:$(; print: name; nextPut:$)! !CroquetTools class removeSelector: #filterAllChangesFrom:!