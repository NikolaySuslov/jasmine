'From Squeak3.6 of ''6 October 2003'' [latest update: #5429] on 7 February 2004 at 2:49:55 pm'!"Change Set:		YAXOFixesDate:			7 February 2004Author:			Andreas RaabA few fixes and improvements for Yaxo:- XMLNodeWithElements>>elementAt:ifAbsent:	Used to refer to (non-existing) XMLElement>>key - changed to (existing) XMLElement>>name- XMLTokenizer>>nextAttributeValue	Improved performance by avoiding a peek/next pair (just next is sufficent)- XMLWriter>>startComment	Comment should be delimited by '<!!--' rather than '<--'.- XMLWriter>>pcData:	Improved performance by using quick string-replace primitives for translating characters.- XMLWriter>>attribute:value:	Improved performance by avoiding the (unneeded) flush at the end.- XMLWriter>>xmlDeclaration:	Changed to lower case 'xml' as IE didn not like the uppercase variant."!Object subclass: #XMLWriter	instanceVariableNames: 'stream stack scanner canonical '	classVariableNames: 'XMLTranslation XMLTranslationMap '	poolDictionaries: ''	category: 'XML-Parser'!!XMLNodeWithElements methodsFor: 'accessing' stamp: 'ar 11/16/2003 18:54'!elementAt: entityName ifAbsent: aBlock	elements		ifNil: [^aBlock value].	^self elements detect: [:each | each name = entityName] ifNone: [^aBlock value]! !!XMLTokenizer methodsFor: 'tokenizing' stamp: 'ar 11/17/2003 22:05'!nextAttributeValue	| delimiterChar attributeValueStream nextChar nextPeek referenceString entity entityValue |	delimiterChar _ self next.	(delimiterChar == $"		or: [delimiterChar == $'])		ifFalse: [self errorExpected: 'Attribute value delimiter expected.'].	attributeValueStream _ WriteStream on: (String new).	[	nextPeek _ nextChar _ self next.	nextChar ifNil: [self errorExpected: 'Character expected.'].	nextChar == $&		ifTrue: [			self peek == $#				ifTrue: [					nextPeek _ nil.					nextChar _ self nextCharReference]				ifFalse: [					referenceString _ self nextLiteral.					self next == $;						ifFalse: [self errorExpected: ';'].					entity _ self entity: referenceString.					entityValue _ entity valueForContext: #content.					(self class isCharEscape: entityValue)						ifTrue: [							nextPeek _ nil.							nextChar _ entityValue]						ifFalse: [							entityValue _ entityValue asString.							entityValue isEmpty								ifTrue: [nextPeek _ nextChar _ nil]								ifFalse: [									self pushStream: (ReadStream on: entityValue asString).									nextPeek _ nextChar _ self next]]]].	nextPeek == delimiterChar]		whileFalse: [			nextChar ifNotNil: [attributeValueStream nextPut: nextChar]].	^attributeValueStream contents! !!XMLWriter methodsFor: 'writing xml' stamp: 'ar 9/18/2003 02:38'!attribute: attributeName value: attributeValue	self stream		space;		nextPutAll: attributeName.	self		eq;		putAsXMLString: attributeValue.	"self stream flush"! !!XMLWriter methodsFor: 'writing xml' stamp: 'ar 12/15/2002 15:56'!pcData: aString	| lastIndex nextIndex |	lastIndex := 1.	"Unroll the first search to avoid copying"	nextIndex := String findFirstInString: aString inSet: XMLTranslationMap startingAt: lastIndex.	nextIndex = 0 ifTrue:[^self stream nextPutAll: aString].	[self stream nextPutAll: (aString copyFrom: lastIndex to: nextIndex-1).	self stream nextPutAll: (XMLTranslation at: (aString at: nextIndex)).	lastIndex := nextIndex + 1.	nextIndex := String findFirstInString: aString inSet: XMLTranslationMap startingAt: lastIndex.	nextIndex = 0] whileFalse.	self stream nextPutAll: (aString copyFrom: lastIndex to: aString size).! !!XMLWriter methodsFor: 'writing xml' stamp: 'ar 6/4/2002 18:14'!xmlDeclaration: versionString	self canonical		ifFalse: [			self				startPI: 'xml';				attribute: 'version' value: versionString;				endPI]! !!XMLWriter methodsFor: 'private tags' stamp: 'ar 9/23/2003 18:44'!startComment	self stream nextPutAll: '<!!-- '! !!XMLWriter class methodsFor: 'class initialization' stamp: 'ar 2/7/2004 14:49'!initialize	"XMLWriter initialize"	XMLTranslation := Dictionary new.	XMLTranslation		at: Character cr put: '&#13;';		at: Character lf put: '&#10;';		at: Character tab put: '&#9;';		at: $& put: '&amp;';		at: $< put: '&lt;';		at: $> put: '&gt;';"		at: $' put: '&apos;'; "		at: $" put: '&quot;'.	XMLTranslationMap := ByteArray new: 256.	XMLTranslation keysDo:[:ch| XMLTranslationMap at: ch asciiValue+1 put: 1].! !XMLWriter initialize!