Object subclass: #MczInstaller	instanceVariableNames: 'stream zip'	classVariableNames: 'Versions'	poolDictionaries: ''	category: 'MCInstaller'!!MczInstaller methodsFor: 'as yet unclassified' stamp: 'avi 1/20/2004 11:13'!associate: tokens	| result |	result _ Dictionary new.	tokens pairsDo: [:key :value | 					value isString ifFalse: [value _ value collect: [:ea | self associate: ea]].					value = 'nil' ifTrue: [value _ ''].					result at: key put: value].	^ result! !!MczInstaller methodsFor: 'as yet unclassified' stamp: 'avi 2/17/2004 02:53'!checkDependencies	| dependencies unmet |	dependencies _ (zip membersMatching: 'dependencies/*') 			collect: [:member | self extractInfoFrom: (self parseMember: member)].	unmet _ dependencies reject: [:dep |		self versions: Versions anySatisfy: (dep at: #id)].	^ unmet isEmpty or: [		self confirm: (String streamContents: [:s|			s nextPutAll: 'The following dependencies seem to be missing:'; cr.			unmet do: [:each | s nextPutAll: (each at: #name); cr].			s nextPutAll: 'Do you still want to install this package?'])]! !!MczInstaller methodsFor: 'as yet unclassified' stamp: 'avi 2/17/2004 03:26'!extractInfoFrom: dict	dict at: #id put: (UUID fromString: (dict at: #id)).	dict at: #date ifPresent: [:d | d isEmpty ifFalse: [dict at: #date put: (Date fromString: d)]].	dict at: #time ifPresent: [:t | t isEmpty ifFalse: [dict at: #time put: (Time readFrom: t readStream)]].	dict at: #ancestors ifPresent: [:a | dict at: #ancestors put: (a collect: [:ea | self extractInfoFrom: ea])].	^ dict! !!MczInstaller methodsFor: 'as yet unclassified' stamp: 'cwp 8/13/2003 01:58'!extractPackageName	^ (self parseMember: 'package') at: #name.	! !!MczInstaller methodsFor: 'as yet unclassified' stamp: 'cwp 8/13/2003 02:17'!extractVersionInfo	^ self extractInfoFrom: (self parseMember: 'version')! !!MczInstaller methodsFor: 'as yet unclassified' stamp: 'avi 2/17/2004 02:56'!install	| sources |	zip _ ZipArchive new.	zip readFrom: stream.	self checkDependencies ifFalse: [^false].	self recordVersionInfo.	sources _ (zip membersMatching: 'snapshot/*') 				asSortedCollection: [:a :b | a fileName < b fileName].	sources do: [:src | self installMember: src].! !!MczInstaller methodsFor: 'as yet unclassified' stamp: 'avi 9/17/2003 22:58'!installMember: member	 self useNewChangeSetDuring:		[member contentStream text fileInAnnouncing: 'loading ', member fileName]! !!MczInstaller methodsFor: 'as yet unclassified' stamp: 'cwp 8/13/2003 01:58'!parseMember: fileName	| tokens |	tokens _ (self scanner scanTokens: (zip contentsOf: fileName)) first.	^ self associate: tokens! !!MczInstaller methodsFor: 'as yet unclassified' stamp: 'cwp 8/7/2003 19:18'!recordVersionInfo	Versions 		at: self extractPackageName 		put: self extractVersionInfo! !!MczInstaller methodsFor: 'as yet unclassified' stamp: 'cwp 8/13/2003 02:04'!scanner	^ Scanner new! !!MczInstaller methodsFor: 'as yet unclassified' stamp: 'avi 2/17/2004 02:55'!stream: aStream	stream _ aStream! !!MczInstaller methodsFor: 'as yet unclassified' stamp: 'bf 2/9/2004 13:56'!useNewChangeSetDuring: aBlock	| changeHolder oldChanges newChanges |	changeHolder _ (ChangeSet respondsTo: #newChanges:)						ifTrue: [ChangeSet]						ifFalse: [Smalltalk].	oldChanges _ (ChangeSet respondsTo: #current)						ifTrue: [ChangeSet current]						ifFalse: [Smalltalk changes].	newChanges _ ChangeSet new name: (ChangeSet uniqueNameLike: self extractPackageName).	changeHolder newChanges: newChanges.	[aBlock value] ensure: [changeHolder newChanges: oldChanges].! !!MczInstaller methodsFor: 'as yet unclassified' stamp: 'bf 2/9/2004 15:00'!versions: aVersionList anySatisfy: aDependencyID	^ aVersionList anySatisfy: [:version | 			aDependencyID = (version at: #id)				or: [self versions: (version at: #ancestors) anySatisfy: aDependencyID]]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MczInstaller class	instanceVariableNames: ''!!MczInstaller class methodsFor: 'services' stamp: 'cwp 8/7/2003 18:49'!extension	^ 'mcz'! !!MczInstaller class methodsFor: 'services' stamp: 'cwp 8/7/2003 18:53'!fileReaderServicesForFile: fileName suffix: suffix	^ Array with: self serviceLoadVersion! !!MczInstaller class methodsFor: 'services' stamp: 'avi 3/7/2004 14:51'!initialize	self clearVersionInfo.	self registerForFileList.! !!MczInstaller class methodsFor: 'services' stamp: 'cwp 8/7/2003 18:54'!loadVersionFile: fileName	self installFileNamed: fileName! !!MczInstaller class methodsFor: 'services' stamp: 'avi 3/7/2004 14:49'!registerForFileList	Smalltalk at: #MCReader ifAbsent: [FileList registerFileReader: self]! !!MczInstaller class methodsFor: 'services' stamp: 'cwp 8/7/2003 18:53'!serviceLoadVersion	^ SimpleServiceEntry		provider: self		label: 'load'		selector: #loadVersionFile:		description: 'load a package version'! !!MczInstaller class methodsFor: 'services' stamp: 'ab 8/8/2003 18:01'!services	^ Array with: self serviceLoadVersion! !!MczInstaller class methodsFor: 'installing' stamp: 'cwp 8/7/2003 18:13'!installFileNamed: aFileName	self installStream: (FileStream readOnlyFileNamed: aFileName)! !!MczInstaller class methodsFor: 'installing' stamp: 'cwp 8/7/2003 17:56'!installStream: aStream	(self on: aStream) install! !!MczInstaller class methodsFor: 'instance creation' stamp: 'cwp 8/7/2003 17:56'!on: aStream	^ self new stream: aStream! !!MczInstaller class methodsFor: 'versionInfo' stamp: 'avi 1/19/2004 13:13'!clearVersionInfo	Versions _ Dictionary new! !!MczInstaller class methodsFor: 'versionInfo' stamp: 'cwp 8/11/2003 23:49'!storeVersionInfo: aVersion	Versions 		at: aVersion package name		put: aVersion info asDictionary! !!MczInstaller class methodsFor: 'versionInfo' stamp: 'avi 3/7/2004 14:51'!unloadMonticello	"self unloadMonticello"	Utilities breakDependents.		Smalltalk at: #MCWorkingCopy ifPresent:		[:wc | 		wc allInstances do:			[:ea | 			Versions at: ea package name put: ea currentVersionInfo asDictionary.			ea breakDependents.			Smalltalk at: #SystemChangeNotifier ifPresent: [:scn | scn uniqueInstance noMoreNotificationsFor: ea]]	displayingProgress: 'Saving version info...'].		"keep things simple and don't unload any class extensions"	(ChangeSet superclassOrder: ((PackageInfo named: 'Monticello') classes)) reverseDo:		[:ea | 		ea removeFromSystem].		self registerForFileList.! !!MczInstaller class methodsFor: 'versionInfo' stamp: 'avi 2/17/2004 02:49'!versionInfo	^ Versions! !MczInstaller initialize!